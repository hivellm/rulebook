import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { createAgentManager } from '../src/core/agent-manager.js';
import { createCLIBridge } from '../src/core/cli-bridge.js';
import { createLogger } from '../src/core/logger.js';
import { createConfigManager } from '../src/core/config-manager.js';
// Mock CLI tools for testing
const mockCLITools = [
  { name: 'cursor-agent', command: 'cursor-agent', version: '1.0.0', available: true },
  { name: 'claude-code', command: 'claude', version: '2.0.0', available: true }
];

// Mock CLI responses
const mockCLIResponses = {
  'cursor-agent': {
    success: true,
    output: 'Mock cursor-agent response',
    duration: 1000,
    exitCode: 0
  },
  'claude-code': {
    success: true,
    output: 'Mock claude-code response',
    duration: 1500,
    exitCode: 0
  }
};

describe('Agent Manager CLI Integration', () => {
  let agentManager: ReturnType<typeof createAgentManager>;
  let cliBridge: ReturnType<typeof createCLIBridge>;
  let logger: ReturnType<typeof createLogger>;
  let configManager: ReturnType<typeof createConfigManager>;

  beforeEach(async () => {
    const projectRoot = process.cwd() || '/mnt/f/Node/hivellm/rulebook';
    logger = createLogger(projectRoot);
    configManager = createConfigManager(projectRoot);
    const config = await configManager.loadConfig();
    cliBridge = createCLIBridge(logger, config);
    agentManager = createAgentManager(projectRoot);

    // Mock the CLI bridge methods for consistent testing
    vi.spyOn(cliBridge, 'detectCLITools').mockResolvedValue(mockCLITools);
    vi.spyOn(cliBridge, 'sendCommandToCLI').mockImplementation(async (toolName, command) => {
      return mockCLIResponses[toolName as keyof typeof mockCLIResponses] || {
        success: false,
        output: '',
        error: 'Tool not found',
        duration: 0,
        exitCode: 1
      };
    });
    vi.spyOn(cliBridge, 'sendTaskCommand').mockImplementation(async (toolName, task) => {
      return {
        success: true,
        output: `Task implemented: ${task.title}`,
        duration: 2000,
        exitCode: 0
      };
    });
    vi.spyOn(cliBridge, 'sendContinueCommand').mockImplementation(async (toolName, iterations) => {
      return {
        success: true,
        output: `Continued ${iterations} times`,
        duration: 1000,
        exitCode: 0
      };
    });
    vi.spyOn(cliBridge, 'sendTestCommand').mockImplementation(async (toolName) => {
      return {
        success: true,
        output: 'Tests passed',
        duration: 3000,
        exitCode: 0
      };
    });
    vi.spyOn(cliBridge, 'sendLintCommand').mockImplementation(async (toolName) => {
      return {
        success: true,
        output: 'Lint passed',
        duration: 500,
        exitCode: 0
      };
    });
    vi.spyOn(cliBridge, 'sendFormatCommand').mockImplementation(async (toolName) => {
      return {
        success: true,
        output: 'Format completed',
        duration: 500,
        exitCode: 0
      };
    });
    vi.spyOn(cliBridge, 'sendCommitCommand').mockImplementation(async (toolName, message) => {
      return {
        success: true,
        output: `Committed: ${message}`,
        duration: 1000,
        exitCode: 0
      };
    });
    vi.spyOn(cliBridge, 'checkCLIHealth').mockResolvedValue(true);
    vi.spyOn(cliBridge, 'getCLICapabilities').mockResolvedValue(['implement', 'test', 'lint', 'format', 'commit']);
  });

  afterEach(async () => {
    await logger.close();
    vi.restoreAllMocks();
  });ger.close();
  });

  it('should detect cursor-agent CLI tool', async () => {
    const availableTools = await cliBridge.detectCLITools();
    
    expect(availableTools).toBeDefined();
    expect(Array.isArray(availableTools)).toBe(true);
    
    const cursorAgent = availableTools.find(tool => tool.name === 'cursor-agent');
    expect(cursorAgent).toBeDefined();
    expect(cursorAgent?.available).toBe(true);
    expect(cursorAgent?.version).toBeDefined();
    
    console.log(`Detected cursor-agent version: ${cursorAgent?.version}`);
  });

  it('should initialize agent manager', async () => {
    await expect(agentManager.initialize()).resolves.not.toThrow();
  });

  it('should handle CLI command execution', async () => {
    const testCommand = 'Test command for agent manager';
    const response = await cliBridge.sendCommandToCLI('cursor-agent', testCommand);
    
    expect(response).toBeDefined();
    expect(typeof response.success).toBe('boolean');
    expect(typeof response.duration).toBe('number');
    expect(typeof response.exitCode).toBe('number');
    
    console.log(`CLI Response: success=${response.success}, duration=${response.duration}ms`);
  });

  it('should handle task command execution', async () => {
    const testTask = {
      id: 'test-task-1',
      title: 'Test Agent Manager CLI Integration',
      description: 'Testing the agent manager with CLI tools integration'
    };
    
    const response = await cliBridge.sendTaskCommand('cursor-agent', testTask);
    
    expect(response).toBeDefined();
    expect(typeof response.success).toBe('boolean');
    expect(typeof response.duration).toBe('number');
    
    console.log(`Task Command Response: success=${response.success}, duration=${response.duration}ms`);
  });

  it('should handle continue command execution', async () => {
    const response = await cliBridge.sendContinueCommand('cursor-agent', 3);
    
    expect(response).toBeDefined();
    expect(typeof response.success).toBe('boolean');
    expect(typeof response.duration).toBe('number');
    
    console.log(`Continue Command Response: success=${response.success}, duration=${response.duration}ms`);
  });

  it('should handle test command execution', async () => {
    const response = await cliBridge.sendTestCommand('cursor-agent');
    
    expect(response).toBeDefined();
    expect(typeof response.success).toBe('boolean');
    expect(typeof response.duration).toBe('number');
    
    console.log(`Test Command Response: success=${response.success}, duration=${response.duration}ms`);
  });

  it('should handle lint command execution', async () => {
    const response = await cliBridge.sendLintCommand('cursor-agent');
    
    expect(response).toBeDefined();
    expect(typeof response.success).toBe('boolean');
    expect(typeof response.duration).toBe('number');
    
    console.log(`Lint Command Response: success=${response.success}, duration=${response.duration}ms`);
  });

  it('should handle format command execution', async () => {
    const response = await cliBridge.sendFormatCommand('cursor-agent');
    
    expect(response).toBeDefined();
    expect(typeof response.success).toBe('boolean');
    expect(typeof response.duration).toBe('number');
    
    console.log(`Format Command Response: success=${response.success}, duration=${response.duration}ms`);
  });

  it('should handle commit command execution', async () => {
    const testMessage = 'Test commit message from agent manager';
    const response = await cliBridge.sendCommitCommand('cursor-agent', testMessage);
    
    expect(response).toBeDefined();
    expect(typeof response.success).toBe('boolean');
    expect(typeof response.duration).toBe('number');
    
    console.log(`Commit Command Response: success=${response.success}, duration=${response.duration}ms`);
  });

  it('should check CLI health', async () => {
    const isHealthy = await cliBridge.checkCLIHealth('cursor-agent');
    
    expect(typeof isHealthy).toBe('boolean');
    
    console.log(`CLI Health Check: ${isHealthy ? 'healthy' : 'unhealthy'}`);
  });

  it('should get CLI capabilities', async () => {
    const capabilities = await cliBridge.getCLICapabilities('cursor-agent');
    
    expect(Array.isArray(capabilities)).toBe(true);
    expect(capabilities).toContain('implement');
    expect(capabilities).toContain('test');
    expect(capabilities).toContain('lint');
    
    console.log(`CLI Capabilities: ${capabilities.length} capabilities found`);
  });

  describe('Agent Manager Workflow Integration', () => {
    it('should initialize agent manager with CLI bridge', async () => {
      await expect(agentManager.initialize()).resolves.not.toThrow();
    });

    it('should select CLI tool from available tools', async () => {
      await agentManager.initialize();
      const selectedTool = await agentManager.selectCLITool('cursor-agent');
      expect(selectedTool).toBe('cursor-agent');
    });

    it('should handle CLI tool selection when preferred tool not available', async () => {
      await agentManager.initialize();
      const selectedTool = await agentManager.selectCLITool('nonexistent-tool');
      expect(selectedTool).toBe('cursor-agent'); // Should select first available
    });

    it('should return null when no CLI tools available', async () => {
      vi.spyOn(cliBridge, 'detectCLITools').mockResolvedValue([]);
      await agentManager.initialize();
      const selectedTool = await agentManager.selectCLITool();
      expect(selectedTool).toBeNull();
    });
  });

  describe('CLI Command Execution Integration', () => {
    it('should execute task workflow with CLI integration', async () => {
      await agentManager.initialize();
      
      const mockTask = {
        id: 'test-task-1',
        title: 'Test Agent Manager CLI Integration',
        description: 'Testing the agent manager with CLI tools integration',
        priority: 'high',
        status: 'pending',
        attempts: 0,
        dependencies: []
      };

      // Mock the openspec manager methods
      const mockOpenSpecManager = {
        getNextTask: vi.fn().mockResolvedValue(mockTask),
        setCurrentTask: vi.fn(),
        updateTaskStatus: vi.fn(),
        markTaskComplete: vi.fn()
      };

      // Replace the openspec manager in agent manager
      (agentManager as any).openspecManager = mockOpenSpecManager;

      const success = await (agentManager as any).executeTaskWorkflow(mockTask, { dryRun: false });
      expect(success).toBe(true);
    });

    it('should handle dry run mode in task workflow', async () => {
      await agentManager.initialize();
      
      const mockTask = {
        id: 'test-task-1',
        title: 'Test Task',
        description: 'Test task description',
        priority: 'high',
        status: 'pending',
        attempts: 0,
        dependencies: []
      };

      const success = await (agentManager as any).executeTaskWorkflow(mockTask, { dryRun: true });
      expect(success).toBe(true);
    });

    it('should handle task execution errors gracefully', async () => {
      await agentManager.initialize();
      
      // Mock CLI to return error
      vi.spyOn(cliBridge, 'sendTaskCommand').mockResolvedValue({
        success: false,
        output: '',
        error: 'Task execution failed',
        duration: 1000,
        exitCode: 1
      });

      const mockTask = {
        id: 'test-task-1',
        title: 'Test Task',
        description: 'Test task description',
        priority: 'high',
        status: 'pending',
        attempts: 0,
        dependencies: []
      };

      const success = await (agentManager as any).executeTaskWorkflow(mockTask, { dryRun: false });
      expect(success).toBe(false);
    });
  });

  describe('CLI Health and Monitoring Integration', () => {
    it('should monitor CLI health during execution', async () => {
      const isHealthy = await cliBridge.checkCLIHealth('cursor-agent');
      expect(isHealthy).toBe(true);
    });

    it('should handle CLI health check failures', async () => {
      vi.spyOn(cliBridge, 'checkCLIHealth').mockResolvedValue(false);
      
      const isHealthy = await cliBridge.checkCLIHealth('cursor-agent');
      expect(isHealthy).toBe(false);
    });

    it('should measure command execution performance', async () => {
      const startTime = Date.now();
      const response = await cliBridge.sendCommandToCLI('cursor-agent', 'Test command');
      const endTime = Date.now();
      
      expect(response.duration).toBeGreaterThan(0);
      expect(response.duration).toBeLessThanOrEqual(endTime - startTime + 100);
    });
  });

  describe('CLI Workflow Step Integration', () => {
    it('should execute implement workflow step', async () => {
      const response = await cliBridge.executeWorkflowStep('cursor-agent', 'implement', {
        task: { id: 'task-123', title: 'Test', description: 'Test' }
      });
      
      expect(response.success).toBe(true);
      expect(response.duration).toBeGreaterThan(0);
    });

    it('should execute test workflow step', async () => {
      const response = await cliBridge.executeWorkflowStep('cursor-agent', 'test');
      
      expect(response.success).toBe(true);
      expect(response.output).toBe('Tests passed');
    });

    it('should execute lint workflow step', async () => {
      const response = await cliBridge.executeWorkflowStep('cursor-agent', 'lint');
      
      expect(response.success).toBe(true);
      expect(response.output).toBe('Lint passed');
    });

    it('should execute format workflow step', async () => {
      const response = await cliBridge.executeWorkflowStep('cursor-agent', 'format');
      
      expect(response.success).toBe(true);
      expect(response.output).toBe('Format completed');
    });

    it('should execute commit workflow step', async () => {
      const response = await cliBridge.executeWorkflowStep('cursor-agent', 'commit', {
        message: 'Test commit'
      });
      
      expect(response.success).toBe(true);
      expect(response.output).toContain('Test commit');
    });

    it('should throw error for unknown workflow step', async () => {
      await expect(
        cliBridge.executeWorkflowStep('cursor-agent', 'unknown' as any)
      ).rejects.toThrow('Unknown workflow step');
    });
  });

  describe('CLI Smart Continue Detection Integration', () => {
    it('should detect processing patterns and not continue', async () => {
      const shouldContinue = await cliBridge.smartContinueDetection('cursor-agent', 'I am thinking about this...');
      expect(shouldContinue).toBe(false);
    });

    it('should detect stopped patterns and continue', async () => {
      const shouldContinue = await cliBridge.smartContinueDetection('cursor-agent', 'Ready for next command');
      expect(shouldContinue).toBe(true);
    });

    it('should default to continue for unclear patterns', async () => {
      const shouldContinue = await cliBridge.smartContinueDetection('cursor-agent', 'Some random output');
      expect(shouldContinue).toBe(true);
    });
  });

  describe('CLI Process Management Integration', () => {
    it('should kill all active processes on cleanup', async () => {
      await cliBridge.killAllProcesses();
      // Should not throw
      expect(true).toBe(true);
    });

    it('should handle process cleanup errors gracefully', async () => {
      // This test ensures the cleanup doesn't throw even if there are no processes
      await expect(cliBridge.killAllProcesses()).resolves.not.toThrow();
    });
  });

  describe('CLI Error Handling Integration', () => {
    it('should handle CLI tool detection errors', async () => {
      vi.spyOn(cliBridge, 'detectCLITools').mockRejectedValue(new Error('Detection failed'));
      
      await expect(cliBridge.detectCLITools()).rejects.toThrow('Detection failed');
    });

    it('should handle CLI command timeouts', async () => {
      vi.spyOn(cliBridge, 'sendCommandToCLI').mockImplementation(async () => {
        throw new Error('Command timeout');
      });

      const response = await cliBridge.sendCommandToCLI('cursor-agent', 'Test command');
      expect(response.success).toBe(false);
      expect(response.error).toBe('Command timeout');
    });

    it('should handle CLI response parsing errors', async () => {
      vi.spyOn(cliBridge, 'getCLICapabilities').mockRejectedValue(new Error('Parsing failed'));
      
      const capabilities = await cliBridge.getCLICapabilities('cursor-agent');
      expect(Array.isArray(capabilities)).toBe(true);
      expect(capabilities.length).toBe(0);
    });
  });
});
