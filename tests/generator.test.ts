import { describe, it, expect } from 'vitest';
import { generateAgentsContent, generateFullAgents } from '../src/core/generator';
import type { ProjectConfig } from '../src/types';

describe('generator', () => {
  const baseConfig: ProjectConfig = {
    languages: ['rust'],
    modules: ['vectorizer'],
    ides: ['cursor'],
    projectType: 'application',
    coverageThreshold: 95,
    strictDocs: true,
    generateWorkflows: true,
  };

  describe('generateAgentsContent', () => {
    it('should generate RULEBOOK block with project rules', async () => {
      const content = await generateAgentsContent(baseConfig);

      expect(content).toContain('<!-- RULEBOOK:START -->');
      expect(content).toContain('<!-- RULEBOOK:END -->');
      expect(content).toContain('# Project Rules');
      expect(content).toContain('Documentation Standards');
      expect(content).toContain('Testing Requirements');
      expect(content).toContain('Feature Development Workflow');
    });

    it('should include coverage threshold', async () => {
      const config = { ...baseConfig, coverageThreshold: 85 };
      const content = await generateAgentsContent(config);

      expect(content).toContain('**Minimum Coverage**: 85%');
    });

    it('should include strict documentation rules when enabled', async () => {
      const config = { ...baseConfig, strictDocs: true };
      const content = await generateAgentsContent(config);

      expect(content).toContain('Minimize Markdown files');
      expect(content).toContain('Allowed Root-Level Documentation');
      expect(content).toContain('/docs` directory');
    });

    it('should include .rulesignore documentation', async () => {
      const content = await generateAgentsContent(baseConfig);

      expect(content).toContain('Rules Configuration');
      expect(content).toContain('.rulesignore');
    });

    it('should include generated timestamp', async () => {
      const content = await generateAgentsContent(baseConfig);

      expect(content).toContain('Generated by @hivellm/rulebook');
      expect(content).toMatch(/Generated at: \d{4}-\d{2}-\d{2}T/);
    });
  });

  describe('generateFullAgents', () => {
    it('should generate complete AGENTS.md with all sections', async () => {
      const config: ProjectConfig = {
        languages: ['rust', 'typescript'],
        modules: ['vectorizer', 'synap'],
        ides: ['cursor'],
        projectType: 'application',
        coverageThreshold: 95,
        strictDocs: true,
        generateWorkflows: true,
      };

      const content = await generateFullAgents(config);

      // Should include RULEBOOK block
      expect(content).toContain('<!-- RULEBOOK:START -->');
      expect(content).toContain('<!-- RULEBOOK:END -->');

      // Should include language blocks
      expect(content).toContain('<!-- RUST:START -->');
      expect(content).toContain('<!-- RUST:END -->');
      expect(content).toContain('<!-- TYPESCRIPT:START -->');
      expect(content).toContain('<!-- TYPESCRIPT:END -->');

      // Should include module blocks
      expect(content).toContain('<!-- VECTORIZER:START -->');
      expect(content).toContain('<!-- VECTORIZER:END -->');
      expect(content).toContain('<!-- SYNAP:START -->');
      expect(content).toContain('<!-- SYNAP:END -->');
    });

    it('should generate content for single language', async () => {
      const config = { ...baseConfig };
      const content = await generateFullAgents(config);

      expect(content).toContain('<!-- RUST:START -->');
      expect(content).toContain('<!-- RUST:END -->');
      expect(content).not.toContain('<!-- TYPESCRIPT:START -->');
    });

    it('should generate content for multiple modules', async () => {
      const config: ProjectConfig = {
        ...baseConfig,
        modules: ['vectorizer', 'synap', 'context7'],
      };
      const content = await generateFullAgents(config);

      expect(content).toContain('<!-- VECTORIZER:START -->');
      expect(content).toContain('<!-- SYNAP:START -->');
      expect(content).toContain('<!-- CONTEXT7:START -->');
    });
  });
});
