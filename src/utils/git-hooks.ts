import { access, mkdir, writeFile, unlink, readFile } from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { LanguageDetection } from '../types.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export interface HookGenerationOptions {
  languages: LanguageDetection[];
  cwd: string;
}

const LANGUAGE_HOOK_MAP: Record<string, string> = {
  typescript: 'typescript',
  javascript: 'typescript',
  rust: 'rust',
  python: 'python',
  go: 'go',
  java: 'java',
  csharp: 'csharp',
  php: 'php',
  ruby: 'ruby',
  elixir: 'elixir',
  kotlin: 'kotlin',
  swift: 'swift',
  scala: 'scala',
  dart: 'dart',
  erlang: 'erlang',
  haskell: 'haskell',
};

async function loadHookTemplate(
  language: string,
  hookType: 'pre-commit' | 'pre-push'
): Promise<string | null> {
  try {
    const templatePath = path.join(
      __dirname,
      '../../templates/hooks',
      `${language}-${hookType}.sh`
    );
    return await readFile(templatePath, 'utf-8');
  } catch {
    return null;
  }
}

export async function installGitHooks(options: HookGenerationOptions): Promise<void> {
  const { languages, cwd } = options;

  const gitDir = path.join(cwd, '.git');
  try {
    await access(gitDir);
  } catch {
    throw new Error('Git repository not initialized. Run "git init" before installing hooks.');
  }

  const hooksDir = path.join(gitDir, 'hooks');

  // Ensure hooks directory exists
  await mkdir(hooksDir, { recursive: true });

  // Generate and install pre-commit hook
  const preCommitContent = await generatePreCommitHook(languages);
  const preCommitPath = path.join(hooksDir, 'pre-commit');
  await writeFile(preCommitPath, preCommitContent, { mode: 0o755 });

  // Generate and install pre-push hook
  const prePushContent = await generatePrePushHook(languages);
  const prePushPath = path.join(hooksDir, 'pre-push');
  await writeFile(prePushPath, prePushContent, { mode: 0o755 });
}

async function generatePreCommitHook(languages: LanguageDetection[]): Promise<string> {
  const hookContents: string[] = [];

  // Try to load template for each language
  for (const lang of languages) {
    const mappedLang = LANGUAGE_HOOK_MAP[lang.language];
    if (!mappedLang) continue;

    const template = await loadHookTemplate(mappedLang, 'pre-commit');
    if (template) {
      // Remove shebang and header comments (we'll add one master shebang)
      const content = template
        .replace(/^#!\/bin\/sh\n/, '')
        .replace(/^# .*\n# Generated.*\n\n/, '');
      hookContents.push(content);
    }
  }

  // If no templates loaded, provide generic fallback
  if (hookContents.length === 0) {
    hookContents.push(`
echo "🔍 Running generic pre-commit checks..."

# Try common test commands
if [ -f "package.json" ] && grep -q '"test"' package.json 2>/dev/null; then
  npm test || exit 1
elif [ -f "Cargo.toml" ]; then
  cargo test || exit 1
elif [ -f "Makefile" ]; then
  make test || exit 1
fi
`);
  }

  return `#!/bin/sh
# Git Pre-Commit Hook
# Generated by @hivellm/rulebook
# Runs quality checks before allowing commits

${hookContents.join('\n')}

exit 0
`;
}

async function generatePrePushHook(languages: LanguageDetection[]): Promise<string> {
  const hookContents: string[] = [];

  // Try to load template for each language
  for (const lang of languages) {
    const mappedLang = LANGUAGE_HOOK_MAP[lang.language];
    if (!mappedLang) continue;

    const template = await loadHookTemplate(mappedLang, 'pre-push');
    if (template) {
      // Remove shebang and header comments
      const content = template
        .replace(/^#!\/bin\/sh\n/, '')
        .replace(/^# .*\n# Generated.*\n\n/, '');
      hookContents.push(content);
    }
  }

  // If no templates loaded, provide generic fallback
  if (hookContents.length === 0) {
    hookContents.push(`
echo "🚀 Running generic pre-push checks..."

# Try common build commands
if [ -f "package.json" ] && grep -q '"build"' package.json 2>/dev/null; then
  npm run build || exit 1
elif [ -f "Cargo.toml" ]; then
  cargo build --release || exit 1
elif [ -f "Makefile" ]; then
  make build || exit 1
fi
`);
  }

  return `#!/bin/sh
# Git Pre-Push Hook
# Generated by @hivellm/rulebook
# Runs comprehensive checks before allowing push

${hookContents.join('\n')}

exit 0
`;
}

export async function uninstallGitHooks(cwd: string): Promise<void> {
  const hooksDir = path.join(cwd, '.git', 'hooks');

  try {
    await unlink(path.join(hooksDir, 'pre-commit'));
  } catch {
    // Ignore if file doesn't exist
  }

  try {
    await unlink(path.join(hooksDir, 'pre-push'));
  } catch {
    // Ignore if file doesn't exist
  }
}
