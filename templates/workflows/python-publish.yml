name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.0.0)'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
    - uses: actions/checkout@v5
      with:
        ref: ${{ github.event.inputs.tag || github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
    
    - name: Install package dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f pyproject.toml ]; then pip install .[dev]; fi
    
    - name: Verify version matches tag
      run: |
        TAG="${{ github.event.inputs.tag || github.ref_name }}"
        TAG_VERSION="${TAG#v}"
        if [ -f pyproject.toml ]; then
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || \
                    python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        elif [ -f setup.py ]; then
          VERSION=$(python setup.py --version)
        fi
        if [ "$VERSION" != "$TAG_VERSION" ]; then
          echo "Error: Package version ($VERSION) does not match tag ($TAG_VERSION)"
          exit 1
        fi
        echo "Version check passed: $VERSION"
    
    - name: Check manifest
      run: check-manifest
    
    - name: Run tests
      run: pytest
    
    - name: Run linters
      run: |
        ruff check .
        black --check .
        mypy .
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to Test PyPI
      if: github.event_name == 'workflow_dispatch'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
    
    - name: Publish to PyPI
      if: github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      # Uses trusted publishing, no token needed if configured in PyPI
    
    - name: Verify publication
      run: |
        sleep 10
        VERSION=$(python setup.py --version 2>/dev/null || python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        pip index versions $(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['name'])") || true
        echo "Published version $VERSION to PyPI"

